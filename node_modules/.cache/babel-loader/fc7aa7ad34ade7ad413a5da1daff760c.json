{"ast":null,"code":"var _jsxFileName = \"D:\\\\heynode\\\\COVID19-Tracker-master\\\\src\\\\components\\\\Map.js\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { scaleQuantile } from \"d3-scale\";\nimport React, { Component } from \"react\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\";\nimport INDIA_TOPO_JSON from \"../constants/india.topo.json\";\nimport styles from '../styles/MapStyles';\nimport \"../styles/MapStyles.js\";\nimport LinearGradient from \"./LinearGradient.js\";\n/**\n * Courtesy: https://rawgit.com/Anujarya300/bubble_maps/master/data/geography-data/india.topo.json\n * Looking topojson for other countries/world?\n * Visit: https://github.com/markmarkoh/datamaps\n */\n\nconst PROJECTION_CONFIG = {\n  scale: 350,\n  center: [78.9629, 22.5937] // always in [East Latitude, North Longitude]\n\n}; // Red Variants\n\nconst COLOR_RANGE = [\"#ffedea\", \"#ffcec5\", \"#ffdec5\", \"#ffad9f\", \"#ff8a75\", \"#ff5533\", \"#e2492d\", \"#be3d26\", \"#9a311f\", \"#782618\"];\nconst DEFAULT_COLOR = \"#EEE\";\nconst geographyStyle = {\n  default: {\n    outline: \"none\"\n  },\n  hover: {\n    fill: \"#ccc\",\n    transition: \"all 350ms\",\n    outline: \"none\"\n  },\n  pressed: {\n    outline: \"none\"\n  }\n};\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onMouseEnter = (geo, current = {\n      value: \"NA\"\n    }) => {\n      return () => {\n        this.setState({\n          tooltipContent: `${geo.properties.name}: ${current.value}`\n        }, () => this.props.currentLocation(geo.properties.name));\n      };\n    };\n\n    this.onMouseLeave = () => {\n      this.setState({\n        tooltipContent: \"\"\n      });\n    };\n\n    this.state = {\n      tooltipContent: \"\",\n      data: [{\n        id: \"AP\",\n        state: \"Andhra Pradesh\",\n        value: 10\n      }, {\n        id: \"AR\",\n        state: \"Arunachal Pradesh\",\n        value: 2\n      }]\n    };\n  }\n\n  render() {\n    const data = this.props.mapData;\n    const gradientData = {\n      fromColor: COLOR_RANGE[0],\n      toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\n      min: 0,\n      max: data.reduce((max, item) => item.value > max ? item.value : max, 0)\n    };\n    const colorScale = scaleQuantile().domain(data.map(d => d.value)).range(COLOR_RANGE);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, this.state.tooltipContent), /*#__PURE__*/React.createElement(ComposableMap, {\n      projectionConfig: PROJECTION_CONFIG,\n      projection: \"geoMercator\",\n      width: 600,\n      height: 220,\n      \"data-tip\": \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Geographies, {\n      geography: INDIA_TOPO_JSON,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, ({\n      geographies\n    }) => geographies.map(geo => {\n      const current = data.find(s => s.id === geo.id);\n      return /*#__PURE__*/React.createElement(Geography, {\n        key: geo.rsmKey,\n        geography: geo,\n        fill: current ? colorScale(current.value) : DEFAULT_COLOR,\n        style: geographyStyle,\n        onMouseEnter: this.onMouseEnter(geo, current),\n        onMouseLeave: this.onMouseLeave,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 19\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(LinearGradient, {\n      data: gradientData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withStyles(styles)(Map);","map":{"version":3,"sources":["D:/heynode/COVID19-Tracker-master/src/components/Map.js"],"names":["withStyles","scaleQuantile","React","Component","ComposableMap","Geographies","Geography","ReactTooltip","INDIA_TOPO_JSON","styles","LinearGradient","PROJECTION_CONFIG","scale","center","COLOR_RANGE","DEFAULT_COLOR","geographyStyle","default","outline","hover","fill","transition","pressed","Map","constructor","props","onMouseEnter","geo","current","value","setState","tooltipContent","properties","name","currentLocation","onMouseLeave","state","data","id","render","mapData","gradientData","fromColor","toColor","length","min","max","reduce","item","colorScale","domain","map","d","range","geographies","find","s","rsmKey"],"mappings":"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","sourcesContent":["import { withStyles } from \"@material-ui/styles\";\nimport { scaleQuantile } from \"d3-scale\";\nimport React, { Component } from \"react\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport ReactTooltip from \"react-tooltip\";\nimport INDIA_TOPO_JSON from \"../constants/india.topo.json\";\nimport styles from '../styles/MapStyles';\nimport \"../styles/MapStyles.js\";\nimport LinearGradient from \"./LinearGradient.js\";\n\n/**\n * Courtesy: https://rawgit.com/Anujarya300/bubble_maps/master/data/geography-data/india.topo.json\n * Looking topojson for other countries/world?\n * Visit: https://github.com/markmarkoh/datamaps\n */\n\nconst PROJECTION_CONFIG = {\n  scale: 350,\n  center: [78.9629, 22.5937], // always in [East Latitude, North Longitude]\n};\n\n// Red Variants\nconst COLOR_RANGE = [\n  \"#ffedea\",\n  \"#ffcec5\",\n  \"#ffdec5\",\n  \"#ffad9f\",\n  \"#ff8a75\",\n  \"#ff5533\",\n  \"#e2492d\",\n  \"#be3d26\",\n  \"#9a311f\",\n  \"#782618\",\n];\n\nconst DEFAULT_COLOR = \"#EEE\";\n\nconst geographyStyle = {\n  default: {\n    outline: \"none\",\n  },\n  hover: {\n    fill: \"#ccc\",\n    transition: \"all 350ms\",\n    outline: \"none\",\n  },\n  pressed: {\n    outline: \"none\",\n  },\n};\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tooltipContent: \"\",\n      data: [\n        { id: \"AP\", state: \"Andhra Pradesh\", value: 10 },\n        { id: \"AR\", state: \"Arunachal Pradesh\", value: 2 },\n      ],\n    };\n  }\n\n  onMouseEnter = (geo, current = { value: \"NA\" }) => {\n    return () => {\n      this.setState(\n        {\n          tooltipContent: `${geo.properties.name}: ${current.value}`,\n        },\n        () => this.props.currentLocation(geo.properties.name)\n      );\n    };\n  };\n\n  onMouseLeave = () => {\n    this.setState({ tooltipContent: \"\" });\n  };\n\n  render() {\n    const data = this.props.mapData;\n    const gradientData = {\n      fromColor: COLOR_RANGE[0],\n      toColor: COLOR_RANGE[COLOR_RANGE.length - 1],\n      min: 0,\n      max: data.reduce((max, item) => (item.value > max ? item.value : max), 0),\n    };\n\n    const colorScale = scaleQuantile()\n      .domain(data.map((d) => d.value))\n      .range(COLOR_RANGE);\n\n    return (\n      <div>\n        <ReactTooltip>{this.state.tooltipContent}</ReactTooltip>\n        <ComposableMap\n          projectionConfig={PROJECTION_CONFIG}\n          projection=\"geoMercator\"\n          width={600}\n          height={220}\n          data-tip=\"\"\n        >\n          <Geographies geography={INDIA_TOPO_JSON}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                const current = data.find((s) => s.id === geo.id);\n                return (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill={current ? colorScale(current.value) : DEFAULT_COLOR}\n                    style={geographyStyle}\n                    onMouseEnter={this.onMouseEnter(geo, current)}\n                    onMouseLeave={this.onMouseLeave}\n                  />\n                );\n              })\n            }\n          </Geographies>\n        </ComposableMap>\n        <LinearGradient data={gradientData} />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Map);\n"]},"metadata":{},"sourceType":"module"}