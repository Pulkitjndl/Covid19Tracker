{"ast":null,"code":"var _jsxFileName = \"D:\\\\heynode\\\\COVID19-Tracker-master\\\\src\\\\components\\\\DisplayTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { faArrowCircleDown, faArrowCircleRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport \"../styles/DisplayTable.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst useSortableData = (items, config = null) => {\n  _s();\n\n  const [sortConfig, setSortConfig] = React.useState(config);\n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n\n        return 0;\n      });\n    }\n\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = key => {\n    let direction = \"ascending\";\n\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\";\n    }\n\n    setSortConfig({\n      key,\n      direction\n    });\n  };\n\n  return {\n    items: sortedItems,\n    requestSort,\n    sortConfig\n  };\n};\n\n_s(useSortableData, \"RK+7Z8/M5Gu9u9DrSbX+5MpLDnQ=\");\n\nconst DisplayTable = ({\n  tableData,\n  isDarkMode,\n  districtLevel\n}) => {\n  _s2();\n\n  let result;\n\n  try {\n    result = tableData.map(dataItem => {\n      let newObject = {};\n\n      for (let [key, value] of Object.entries(dataItem)) {\n        if (key === \"lastupdatedtime\" || key === \"state\" || key === \"statecode\" || key === \"statenotes\") {\n          newObject[key] = value;\n        } else {\n          newObject[key] = Number(value);\n        }\n      }\n\n      return newObject;\n    });\n  } catch (err) {}\n\n  const getDistrictData = statecode => {\n    try {\n      const stateWithDist = districtLevel.find(state => state.statecode === statecode);\n      const districtData = stateWithDist.districtData.map(dist => /*#__PURE__*/_jsxDEV(\"tr\", {\n        className: \"district-tr\",\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"district-td\",\n          style: lightText,\n          children: dist.district\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"district-td\",\n          style: lightText,\n          children: [dist.confirmed, dist.delta.confirmed > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"delta-confirmed\",\n            children: [\"[\", dist.delta.confirmed, \"] \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"district-td\",\n          style: lightText,\n          children: dist.active\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"district-td\",\n          style: lightText,\n          children: [dist.recovered, dist.delta.recovered > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"delta-recovered\",\n            children: [\"[\", dist.delta.recovered, \"] \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"district-td\",\n          style: lightText,\n          children: [dist.deceased, dist.delta.deceased > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"delta-deceased\",\n            children: [\"[\", dist.delta.deceased, \"] \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, dist.district, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this));\n\n      const markup = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"district-tr\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"tableHead districtHead\",\n            children: \"District\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"tableHead districtHead\",\n            children: \"Confirmed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"tableHead districtHead\",\n            children: \"Active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"tableHead districtHead\",\n            children: \"Recovered\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"tableHead districtHead\",\n            children: \"Deceased\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)]\n        }, `${statecode} Dist`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), districtData, /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"spacer-bottom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n\n      return markup;\n    } catch (err) {}\n  };\n\n  const {\n    items,\n    requestSort,\n    sortConfig\n  } = useSortableData(result);\n  const [displayDist, setDisplayDist] = useState(false);\n  const [distId, setDistId] = useState(\"\");\n  const lightText = {\n    color: isDarkMode && \"rgba(255,255,255,.75)\"\n  };\n\n  const getClassNamesFor = name => {\n    if (!sortConfig) {\n      return;\n    }\n\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n\n  const toggleDistView = id => {\n    setDistId(id);\n    setDisplayDist(!displayDist);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"caption\", {\n      style: {\n        marginTop: \"1rem\",\n        marginBottom: \"4rem\"\n      },\n      children: \"Expand to get district wise data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"tableHead\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => requestSort(\"state\"),\n            className: `tableHead-Button ${getClassNamesFor(\"state\")}`,\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"tableHead\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => requestSort(\"confirmed\"),\n            className: `tableHead-Button ${getClassNamesFor(\"confirmed\")}`,\n            children: \"Confirmed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"tableHead\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => requestSort(\"active\"),\n            className: `tableHead-Button ${getClassNamesFor(\"active\")}`,\n            children: \"Active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"tableHead\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => requestSort(\"recovered\"),\n            className: `tableHead-Button ${getClassNamesFor(\"recovered\")}`,\n            children: \"Recovered\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"tableHead\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => requestSort(\"deaths\"),\n            className: `tableHead-Button ${getClassNamesFor(\"deaths\")}`,\n            children: \"Deceased\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"state-tr\",\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"state-td\",\n            style: lightText,\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: distId === item.statecode && displayDist ? faArrowCircleDown : faArrowCircleRight,\n              className: \"\",\n              onClick: () => toggleDistView(item.statecode)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this), \" \", item.state]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"state-td\",\n            style: lightText,\n            children: [item.confirmed, item.deltaconfirmed > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"delta-confirmed\",\n              children: [\"[\", item.deltaconfirmed, \"]\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"state-td\",\n            style: lightText,\n            children: item.active\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"state-td\",\n            style: lightText,\n            children: [item.recovered, item.deltarecovered > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"delta-recovered\",\n              children: [\"[\", item.deltarecovered, \"]\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"state-td\",\n            style: lightText,\n            children: [item.deaths, item.deltadeaths > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"delta-deceased\",\n              children: [\"[\", item.deltadeaths, \"] \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), distId === item.statecode && displayDist ? getDistrictData(item.statecode) : null]\n      }, item.statecode, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(DisplayTable, \"M1aLHXQjiQmBlHD9FDOVfRxUw5k=\", false, function () {\n  return [useSortableData];\n});\n\n_c = DisplayTable;\nexport default DisplayTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayTable\");","map":{"version":3,"sources":["D:/heynode/COVID19-Tracker-master/src/components/DisplayTable.js"],"names":["faArrowCircleDown","faArrowCircleRight","FontAwesomeIcon","React","useState","useSortableData","items","config","sortConfig","setSortConfig","sortedItems","useMemo","sortableItems","sort","a","b","key","direction","requestSort","DisplayTable","tableData","isDarkMode","districtLevel","result","map","dataItem","newObject","value","Object","entries","Number","err","getDistrictData","statecode","stateWithDist","find","state","districtData","dist","lightText","district","confirmed","delta","active","recovered","deceased","markup","displayDist","setDisplayDist","distId","setDistId","color","getClassNamesFor","name","undefined","toggleDistView","id","marginTop","marginBottom","item","deltaconfirmed","deltarecovered","deaths","deltadeaths"],"mappings":"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","sourcesContent":["import { faArrowCircleDown, faArrowCircleRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport \"../styles/DisplayTable.css\";\n\nconst useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = React.useState(config);\n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = \"ascending\";\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === \"ascending\"\n    ) {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedItems, requestSort, sortConfig };\n};\n\nconst DisplayTable = ({ tableData, isDarkMode, districtLevel }) => {\n  let result;\n  try {\n    result = tableData.map((dataItem) => {\n      let newObject = {};\n      for (let [key, value] of Object.entries(dataItem)) {\n        if (\n          key === \"lastupdatedtime\" ||\n          key === \"state\" ||\n          key === \"statecode\" ||\n          key === \"statenotes\"\n        ) {\n          newObject[key] = value;\n        } else {\n          newObject[key] = Number(value);\n        }\n      }\n      return newObject;\n    });\n  } catch (err) { }\n\n  const getDistrictData = (statecode) => {\n    try {\n      const stateWithDist = districtLevel.find(\n        (state) => state.statecode === statecode\n      );\n      const districtData = stateWithDist.districtData.map((dist) => (\n        <tr className=\"district-tr\" key={dist.district}>\n          <td className=\"district-td\" style={lightText}>\n            {dist.district}\n          </td>\n          <td className=\"district-td\" style={lightText}>\n            {dist.confirmed}\n            {dist.delta.confirmed > 0 && (\n              <span className=\"delta-confirmed\">[{dist.delta.confirmed}] </span>\n            )}\n          </td>\n          <td className=\"district-td\" style={lightText}>\n            {dist.active}\n          </td>\n          <td className=\"district-td\" style={lightText}>\n            {dist.recovered}\n            {dist.delta.recovered > 0 && (\n              <span className=\"delta-recovered\">[{dist.delta.recovered}] </span>\n            )}\n          </td>\n          <td className=\"district-td\" style={lightText}>\n            {dist.deceased}\n            {dist.delta.deceased > 0 && (\n              <span className=\"delta-deceased\">[{dist.delta.deceased}] </span>\n            )}\n          </td>\n        </tr>\n      ));\n      const markup = (\n        <>\n          <tr className=\"district-tr\" key={`${statecode} Dist`}>\n            <th className=\"tableHead districtHead\">District</th>\n            <th className=\"tableHead districtHead\">Confirmed</th>\n            <th className=\"tableHead districtHead\">Active</th>\n            <th className=\"tableHead districtHead\">Recovered</th>\n            <th className=\"tableHead districtHead\">Deceased</th>\n          </tr>\n          {districtData}\n          <tr className=\"spacer-bottom\"></tr>\n        </>\n      );\n      return markup;\n    } catch (err) { }\n  };\n\n  const { items, requestSort, sortConfig } = useSortableData(result);\n  const [displayDist, setDisplayDist] = useState(false);\n  const [distId, setDistId] = useState(\"\");\n\n  const lightText = {\n    color: isDarkMode && \"rgba(255,255,255,.75)\",\n  };\n\n  const getClassNamesFor = (name) => {\n    if (!sortConfig) {\n      return;\n    }\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n\n  const toggleDistView = (id) => {\n    setDistId(id);\n    setDisplayDist(!displayDist);\n  };\n\n  return (\n    <table>\n      <caption\n        style={{\n          marginTop: \"1rem\",\n          marginBottom: \"4rem\",\n        }}\n      >\n        Expand to get district wise data\n      </caption>\n      <thead>\n        <tr>\n          <th className=\"tableHead\">\n            <button\n              type=\"button\"\n              onClick={() => requestSort(\"state\")}\n              className={`tableHead-Button ${getClassNamesFor(\"state\")}`}\n            >\n              Name\n            </button>\n          </th>\n          <th className=\"tableHead\">\n            <button\n              type=\"button\"\n              onClick={() => requestSort(\"confirmed\")}\n              className={`tableHead-Button ${getClassNamesFor(\"confirmed\")}`}\n            >\n              Confirmed\n            </button>\n          </th>\n          <th className=\"tableHead\">\n            <button\n              type=\"button\"\n              onClick={() => requestSort(\"active\")}\n              className={`tableHead-Button ${getClassNamesFor(\"active\")}`}\n            >\n              Active\n            </button>\n          </th>\n          <th className=\"tableHead\">\n            <button\n              type=\"button\"\n              onClick={() => requestSort(\"recovered\")}\n              className={`tableHead-Button ${getClassNamesFor(\"recovered\")}`}\n            >\n              Recovered\n            </button>\n          </th>\n          <th className=\"tableHead\">\n            <button\n              type=\"button\"\n              onClick={() => requestSort(\"deaths\")}\n              className={`tableHead-Button ${getClassNamesFor(\"deaths\")}`}\n            >\n              Deceased\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {items.map((item) => (\n          <React.Fragment key={item.statecode}>\n            <tr className=\"state-tr\">\n              <td className=\"state-td\" style={lightText}>\n                <FontAwesomeIcon\n                  icon={\n                    distId === item.statecode && displayDist\n                      ? faArrowCircleDown\n                      : faArrowCircleRight\n                  }\n                  className=\"\"\n                  onClick={() => toggleDistView(item.statecode)}\n                />{\" \"}\n                {item.state}\n              </td>\n\n              <td className=\"state-td\" style={lightText}>\n                {item.confirmed}\n                {item.deltaconfirmed > 0 && (\n                  <span className=\"delta-confirmed\">\n                    [{item.deltaconfirmed}]{\" \"}\n                  </span>\n                )}\n              </td>\n              <td className=\"state-td\" style={lightText}>\n                {item.active}\n              </td>\n              <td className=\"state-td\" style={lightText}>\n                {item.recovered}\n                {item.deltarecovered > 0 && (\n                  <span className=\"delta-recovered\">\n                    [{item.deltarecovered}]{\" \"}\n                  </span>\n                )}\n              </td>\n              <td className=\"state-td\" style={lightText}>\n                {item.deaths}\n                {item.deltadeaths > 0 && (\n                  <span className=\"delta-deceased\">[{item.deltadeaths}] </span>\n                )}\n              </td>\n            </tr>\n            {distId === item.statecode && displayDist\n              ? getDistrictData(item.statecode)\n              : null}\n          </React.Fragment>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DisplayTable;\n"]},"metadata":{},"sourceType":"module"}